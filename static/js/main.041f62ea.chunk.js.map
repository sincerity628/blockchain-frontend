{"version":3,"sources":["store/store.js","services/transaction.js","services/blockChain.js","components/block-card/BlockCard.js","components/transaction-table/TransactionTable.js","pages/home/Home.js","pages/setting/Setting.js","pages/create-transacion/CreateTransaction.js","pages/wallet-detail/WalletDetail.js","components/navbar/NavBar.js","pages/transaction-queue/TransactionQueue.js","App.js","serviceWorker.js","index.js"],"names":["ec","EC","require","Transaction","initChain","Blockchain","myKey","keyFromPrivate","addTransaction","trans","transaction","from","to","amount","signTransaction","sha256","this","timestamp","Date","now","toString","signKey","getPublic","hash","calculateHash","sig","sign","signature","toDER","console","log","length","keyFromPublic","verify","module","exports","Block","prevHash","random","JSON","stringify","difficulty","substring","Array","join","isValid","chain","createNewBlock","miningAward","transactionQueue","awardAddress","push","block","getLatestBlock","mine","address","balence","queue","i","currentBlock","prevBlock","hasValidTransaction","originBlock","BlockCard","index","className","style","color","TransactionTable","isDisplay","scope","map","key","date","year","getYear","month","getMonth","day","getDate","hour","getHours","min","getMinutes","sec","getSeconds","timeTrans","Home","useState","setChain","blocks","setBlocks","setTransaction","clickedIndex","setClickedIndex","onClick","handleClick","Setting","success","setSuccess","setDifficulty","award","setAward","setting","setSetting","useEffect","handleChange","e","target","id","Number","value","onSubmit","preventDefault","setTimeout","htmlFor","onChange","type","initTrans","initError","isError","errorText","CreateTransaction","history","useHistory","setTrans","error","setError","btnLoading","setBtnLoading","timeStamp","placeholder","disabled","WalletDetail","props","walletID","match","params","getTrans","getBalence","NavBar","initSuccess","isSuccess","successText","initMining","isMining","miningText","TransactionQueue","setQueue","mining","setMining","mineTheTransactionQueue","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.041f62ea.chunk.js","sourcesContent":["const EC = require('elliptic').ec;\nconst ec = EC('secp256k1');\nconst { Transaction } = require('../services/transaction');\nconst { Blockchain } = require('../services/blockChain');\n\nexport const initChain = new Blockchain();\n\n// generated by key generator\nconst myKey = ec.keyFromPrivate('079428c87bbf98b5dadf1ad971f721c8ea5a6aef865f1ece3f6ccece081d31cc');\n// const walletAddress = myKey.getPublic('hex');\n\nexport const addTransaction = (trans) => {\n  const transaction = new Transaction(trans.from, trans.to, trans.amount);\n  transaction.signTransaction(myKey);\n  initChain.addTransaction(transaction);\n}\n","const sha256 = require('crypto-js/sha256');\nconst EC = require('elliptic').ec;\nconst ec = EC('secp256k1');\n\nclass Transaction {\n  constructor(from, to, amount) {\n    this.from = from;\n    this.to = to;\n    this.amount = amount;\n    this.timestamp = Date.now();\n  }\n\n  calculateHash() {\n    return sha256(this.from + this.to + this.amount).toString();\n  }\n\n  signTransaction(signKey) {\n    if(signKey.getPublic('hex') !== this.from) {\n      console.log('can not sign to this transaction.');\n      return;\n    }\n\n    const hash = this.calculateHash();\n    const sig = signKey.sign(hash, 'base64');\n\n    this.signature = sig.toDER('hex');\n  }\n\n  isValid() {\n    // the miner's award\n    if(this.from === null) return true;\n\n    if(!this.signature || this.signature.length === 0) {\n      console.log('no signature in this transaction.');\n      return;\n    }\n\n    const publicKey = ec.keyFromPublic(this.from, 'hex');\n    return publicKey.verify(this.calculateHash(), this.signature);\n  }\n}\n\nmodule.exports.Transaction = Transaction;\n","const sha256 = require('crypto-js/sha256');\nconst { Transaction } = require('./transaction');\n\n\nclass Block {\n  constructor(timestamp, transaction, prevHash = '') {\n    this.prevHash = prevHash;\n    this.timestamp = timestamp;\n    this.transaction = transaction;\n    // changeable\n    this.random = 0;\n\n    this.hash = this.calculateHash();\n  }\n\n  calculateHash() {\n    return sha256(this.prevHash + this.timestamp + JSON.stringify(this.transaction) + this.random).toString();\n  }\n\n  mine(difficulty) {\n    while(this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(0)) {\n      this.random ++;\n      this.hash = this.calculateHash();\n    }\n    // console.log('Block mined: ' + this.hash);\n  }\n\n  hasValidTransaction() {\n    for(const trans of this.transaction) {\n      if(!trans.isValid) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nclass Blockchain {\n  constructor() {\n    this.chain = [this.createNewBlock()];\n    this.difficulty = 3;\n    this.miningAward = 100;\n    this.transactionQueue = [];\n  }\n\n  createNewBlock() {\n    return new Block('1576067366730', [], '0');\n  }\n\n  getLatestBlock() {\n    return this.chain[this.chain.length - 1];\n  }\n\n  mineTheTransactionQueue(awardAddress) {\n    let transaction = new Transaction(null, awardAddress, this.miningAward);\n    this.transactionQueue.push(transaction);\n\n    let block = new Block(Date.now(), this.transactionQueue);\n    block.prevHash = this.getLatestBlock().hash;\n    block.hash = block.calculateHash();\n\n    block.mine(this.difficulty);\n\n    this.chain.push(block);\n    this.transactionQueue = [];\n  }\n\n  addTransaction(transaction) {\n    if(!transaction.from || !transaction.to) {\n      console.log('transaction must have from & to.');\n      return;\n    }\n\n    if(!transaction.isValid()) {\n      console.log('can not add invalid into the chain.');\n      return;\n    }\n\n    this.transactionQueue.push(transaction);\n  }\n\n  getBalence(address) {\n    let balence = 0;\n\n    for(const block of this.chain) {\n      for(const trans of block.transaction) {\n        if(address === trans.from) {\n          balence -= trans.amount;\n        }\n\n        if(address === trans.to) {\n          balence += trans.amount;\n        }\n      }\n    }\n\n    return balence;\n  }\n\n  getTrans(address) {\n    let queue = [];\n\n    for(const block of this.chain) {\n      for(const trans of block.transaction) {\n        if(trans.from === address || trans.to === address) {\n          queue.push(trans);\n        }\n      }\n    }\n\n    return queue;\n  }\n\n  isChainValid() {\n    for(let i = 0; i < this.chain.length; i++) {\n      let currentBlock = this.chain[i];\n      let prevBlock = this.chain[i - 1];\n\n      // check if the block has valid transaction\n      if(!currentBlock.hasValidTransaction()) {\n        console.log('warning! the block (' + i + ') has no valid transaction.');\n        return false;\n      }\n\n      // rehash it to specify if it is being changed.\n      if(currentBlock.calculateHash() !== currentBlock.hash) {\n        console.log('warning! the block(' + i + ') has been changed.');\n        return false\n      };\n\n      // if the currentBlock is point to the prevBlock\n      if(i > 0 && currentBlock.prevHash !== prevBlock.hash) {\n        console.log('warning! the block(' + i + ') is not connected with the block(' + (i - 1) + ').');\n        return false;\n      }\n\n      // check the original block\n      let originBlock = JSON.stringify(this.createNewBlock());\n      if(JSON.stringify(this.chain[0]) !== originBlock) {\n        console.log('warning! The block(0) has been changed.');\n        return false;\n      }\n    }\n    return true;\n  }\n\n  setChain(difficulty, miningAward) {\n    this.difficulty = difficulty;\n    this.miningAward = miningAward;\n  }\n\n}\n\nmodule.exports.Blockchain = Blockchain;\n","import React from 'react';\nimport './block-card.css';\n\nconst BlockCard = ({ block, index }) => {\n  return (\n    <div className=\"block-card card\">\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          <h5 className=\"card-title\">Block{index + 1}\n            { block.prevHash === '0'? (\n                <small className=\"origin-title\">(origin block)</small>\n            ) : null}\n          </h5>\n\n        </li>\n        <li className=\"list-group-item\">\n          <h6>Hash</h6>\n          <small style={{color: \"#\" + block.hash.substring(6, 12)}}>\n            { block.hash.substring(0, 37) + \"...\" }\n          </small>\n          <h6 className=\"mt-2\">Hash of previous block</h6>\n          <small style={{color: \"#\" + block.prevHash.substring(6, 12)}} className=\"pb-2\">\n            { block.prevHash === '0'? ('0') : (block.prevHash.substring(0, 37) + \"...\") }\n          </small>\n        </li>\n\n        <li className=\"list-group-item\">\n          <h6>Random</h6>\n          <small className=\"text-muted\">{ block.random }</small>\n        </li>\n\n        <li className=\"list-group-item\">\n          <h6>Timestamp</h6>\n          <small className=\"text-muted\">{ block.timestamp }</small>\n        </li>\n\n      </ul>\n    </div>\n  );\n}\n\nexport default BlockCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst TransactionTable = ({ queue, isDisplay }) => {\n\n  const timeTrans = (timestamp) => {\n    let date = new Date(timestamp);\n    let year = (date.getYear() + 1900).toString();\n    let month = (date.getMonth() + 1).toString();\n    let day = (date.getDate()).toString();\n    let hour = (date.getHours()).toString();\n    let min = (date.getMinutes()).toString();\n    let sec = (date.getSeconds()).toString();\n    month = month < 10 ? '0' + month : month;\n    day = day < 10 ? '0' + day : day;\n    hour = hour < 10 ? '0' + hour : hour;\n    sec = sec < 10 ? '0' + sec : sec;\n    return year + '-' + month + '-' + day + ' ' + hour + ':' + min + ':' + sec;\n  }\n\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n      <tr>\n        <th scope=\"col\">#</th>\n        <th scope=\"col\">From</th>\n        <th scope=\"col\">To</th>\n        <th scope=\"col\">Amount</th>\n        <th scope=\"col\">Timestamp</th>\n        <th scope=\"col\">Valid?</th>\n      </tr>\n      </thead>\n      <tbody>\n        { queue.map((trans, index) => {\n          return(\n            <tr key={trans.timestamp}>\n              <th scope=\"col\">{ index }</th>\n              <td className=\"from-to\">\n                { trans.from === null? (\n                  <div>\n                    System\n                    <br />\n                    <small className=\"text-secondary\">(mining award)</small>\n                  </div>\n                ) : (\n                  <div>\n\n                    { isDisplay? (\n                      <span>\n                        { trans.from.substring(0, 14) }\n                        { trans.from.length > 14? '...' : null }\n                      </span>\n                    ) : (\n                      <Link to={`/wallet/${trans.from}`}>\n                        { trans.from.substring(0, 14) }\n                        { trans.from.length > 14? '...' : null }\n                      </Link>\n                    ) }\n\n                    <br />\n\n                    { trans.from.substring(0, 14) === '04c1a5b2e99d16'? (\n                      <small className=\"text-secondary\">(这是你)</small>\n                    ) : null }\n\n                  </div>\n                ) }\n              </td>\n              <td className=\"from-to\">\n\n                { isDisplay? (\n                  <span>\n                    { trans.to.substring(0,14) }\n                    { trans.to.length > 14? '...' : null }\n                  </span>\n                ) : (\n                  <Link to={`/wallet/${trans.to}`}>\n                    { trans.to.substring(0,14) }\n                    { trans.to.length > 14? '...' : null }\n                  </Link>\n                ) }\n\n                <br />\n                { trans.to.substring(0, 14) === '04c1a5b2e99d16'? (\n                  <small className=\"text-secondary\">(这是你)</small>\n                ) : null }\n              </td>\n              <td>{ trans.amount }</td>\n              <td>\n                { trans.timestamp }\n                <br />\n                <small className=\"text-secondary\">{timeTrans(trans.timestamp)}</small>\n              </td>\n              { trans.isValid()? (\n                <td>✓</td>\n              ) : (\n                <td>✗</td>\n              ) }\n            </tr>\n          );\n        }) }\n      </tbody>\n    </table>\n  );\n}\n\nexport default TransactionTable;\n","import React, { useState } from 'react';\nimport BlockCard from '../../components/block-card/BlockCard';\nimport TransactionTable from '../../components/transaction-table/TransactionTable';\nimport './home.css';\nconst { initChain } = require('../../store/store');\n\nconst Home = () => {\n  const [chain, setChain] = useState(initChain);\n  const [blocks, setBlocks] = useState(chain.chain);\n  const [transaction, setTransaction] = useState(blocks[0].transaction);\n  const [clickedIndex, setClickedIndex] = useState(0);\n\n  const handleClick = (index) => {\n    setClickedIndex(index);\n    setTransaction(blocks[index].transaction);\n  }\n\n  const handleWarning = () => {\n    setChain(initChain);\n    setBlocks(chain.chain);\n  };\n\n  return (\n    <div className=\"home container mt-2\">\n      <h1>Blocks on chain</h1>\n      <p className=\"text-dark\">每张卡片代表了区块链上的一个区块，点击对应的区块查看其包含的相应交易信息。</p>\n\n      <div className=\"container px-0 card-container\">\n        { blocks.map((block, index) => {\n          return (\n            <div onClick={() => { handleClick(index) }}\n              key={block.hash}\n              className={index === clickedIndex? 'click-card clicked-card' : 'click-card'}\n            >\n              <BlockCard block={block} index={index} />\n            </div>\n          );\n        }) }\n      </div>\n      <div className=\"container mt-3 transactions\">\n        <h1>Transactions inside block{clickedIndex + 1}</h1>\n        { transaction.length? (\n          <TransactionTable queue={transaction} isDisplay={false} />\n        ) : (\n          <p>此区块不含交易信息</p>\n        ) }\n\n      </div>\n      <div onClick={handleWarning}></div>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nconst { initChain } = require('../../store/store');\n\nconst Setting = () => {\n  const [success, setSuccess] = useState(false);\n  const [chain, setChain] = useState(initChain);\n  const [difficulty, setDifficulty] = useState(chain.difficulty);\n  const [award, setAward] = useState(chain.miningAward);\n  const [setting, setSetting] = useState({\n    difficulty: difficulty,\n    award: award\n  });\n\n  useEffect(() => {\n\n    setChain(initChain);\n    setDifficulty(chain.difficulty);\n    setAward(chain.miningAward);\n\n  }, [chain.difficulty, chain.miningAward]);\n\n  const handleChange = (e) => {\n    setSetting({\n      ...setting,\n      [e.target.id]: Number(e.target.value)\n    });\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    chain.setChain(setting.difficulty, setting.award);\n\n    setSuccess(true);\n    setTimeout(() => {\n      setSuccess(false);\n    }, 2000);\n  }\n\n  return (\n    <div className=\"setting\">\n      {success? (\n        <div className=\"alert alert-success\">\n          <div className=\"container\">设置成功</div>\n        </div>\n      ) : null}\n      <div className=\" container mt-2\">\n        <h1>Setting</h1>\n        <p className=\"text-dark\">设置</p>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n            <label htmlFor=\"difficulty\">Difficulty</label>\n            <div className=\"input-group\">\n              <input id=\"difficulty\" value={setting.difficulty} onChange={handleChange} className=\"form-control\" type=\"number\" />\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-secondary\">确定</button>\n              </div>\n            </div>\n            <small className=\"text-secondary\">难度值代表了封装一个区块的难易程度（计算区块哈希值时前几位为0的个数）。</small>\n\n            <br />\n\n            <label htmlFor=\"award\" className=\"mt-3\">Award</label>\n            <div className=\"input-group\">\n              <input id=\"award\" value={setting.award} className=\"form-control\" onChange={handleChange} type=\"number\" />\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-secondary\">确定</button>\n              </div>\n            </div>\n            <small className=\"text-secondary\">Award值代表封装一个区块系统会给予的奖励。</small>\n\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Setting;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './create-transaction.css';\nconst { addTransaction } = require('../../store/store');\n\n\nconst initTrans = {\n  // the wallet address is generated by the private key.\n  from: '04c1a5b2e99d166855a46f98fc92045e988b3a2f5b3bfd8fe9ea67e8575f54ead8d83de22813df14d6eaf05c6859a52c7a71101f4875273682f091245f792e5176',\n  to: '',\n  amount: '',\n  timestamp: Date.now()\n};\n\nconst initError = {\n  isError: false,\n  errorText: 'warning.'\n}\n\nconst CreateTransaction = () => {\n  const history = useHistory();\n\n  const [trans, setTrans] = useState(initTrans);\n  const [error, setError] = useState(initError);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  const handleChange = e => {\n    setError(initError);\n    if(e.target.id === 'amount') {\n      setTrans({\n        ...trans,\n        amount: Number(e.target.value)\n      });\n\n    } else {\n      setTrans({\n        ...trans,\n        [e.target.id]: e.target.value,\n      });\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setBtnLoading(true);\n\n    setTrans({\n      ...trans,\n      timeStamp: Date.now()\n    });\n\n    if(!trans.to || !trans.amount) {\n\n      setTimeout(() => {\n        setBtnLoading(false);\n\n        setError({\n          ...error,\n          isError: true,\n          errorText: '还有交易信息没有填写完整噢！'\n        });\n      }, 1000);\n\n      return;\n    }\n\n    if(trans.amount < 0) {\n\n      setTimeout(() => {\n        setBtnLoading(false);\n\n        setError({\n          ...error,\n          isError: true,\n          errorText: '交易数量必须大于0噢！'\n        });\n\n        setTrans({\n          ...trans,\n          amount: ''\n        });\n\n      }, 1000);\n\n      return;\n    }\n\n    setTimeout(() => {\n\n      addTransaction(trans);\n      setSuccess(true);\n      setTrans(initTrans);\n      setBtnLoading(false);\n\n      setTimeout(() => {\n        setSuccess(false);\n        history.push('/trans-queue');\n      }, 1000);\n\n    }, 1000);\n\n  }\n\n  return (\n    <div className=\"create-transaction\">\n      { success? (\n        <div className=\"alert alert-success\">\n          <div className=\"container\">\n            交易提交成功！\n          </div>\n        </div>\n      ) : null }\n\n      { error.isError? (\n        <div className=\"alert alert-danger\">\n          <div className=\"container\">\n            { error.errorText }\n          </div>\n        </div>\n      ) : null }\n\n      <div className=\"container mt-2\">\n        <h1>Create Transaction</h1>\n        <p className=\"text-dark\">给某人转点钱</p>\n\n        <br />\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"form-group\">\n\n            <label htmlFor=\"from\">From</label>\n            <input className=\"form-control\" placeholder=\"04c1a5b2e99d166855a46f98fc92045e988b3a2f5b3bfd8fe9ea67e8575f54ead8d83de22813df14d6eaf05c6859a52c7a71101f4875273682f091245f792e5176\" disabled />\n            <small className=\"text-secondary\">这是你的钱包地址，你不可以修改它，因为你只能花自己的钱。</small>\n            <br />\n            <label htmlFor=\"to\" className=\"mt-3\">To</label>\n            <input id=\"to\" value={trans.to} onChange={handleChange} className=\"form-control\" />\n            <small className=\"text-secondary\">这是你想转钱对象的地址（由公钥产生）当然，也可以随机填写一些字符串。</small>\n            <br />\n            <label htmlFor=\"amount\" className=\"mt-3\">Amount</label>\n            <input id=\"amount\" value={trans.amount} type=\"number\" onChange={handleChange} className=\"form-control\" />\n            <small className=\"text-secondary\">填入交易数量。 </small>\n\n          </div>\n          <button className=\"btn btn-primary mt-3\">\n            { btnLoading? (\n              <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n            ) : null }\n            <strong>Sign & create transaction</strong>\n          </button>\n        </form>\n      </div>\n\n    </div>\n  );\n}\n\nexport default CreateTransaction;\n","import React, { useState } from 'react';\nimport TransactionTable from '../../components/transaction-table/TransactionTable';\nimport './wallet-detail.css';\nconst { initChain } = require('../../store/store');\n\n\nconst WalletDetail = (props) => {\n  const walletID = props.match.params.key;\n\n  const [chain, setChain] = useState(initChain);\n  const [trans, setTrans] = useState(chain.getTrans(walletID));\n\n  const handleWarning = () => {\n    setChain(initChain);\n    setTrans(chain.getTrans(walletID));\n  }\n\n  return (\n    <div className=\"wallet-detail container mt-2\" key={walletID}>\n      <h1>Wallet details</h1>\n\n      <h4>Address: </h4>\n      <div>{ walletID }</div>\n\n      <h4 className=\"mt-3\">Balence: </h4>\n      <div>{ chain.getBalence(walletID) }</div>\n\n      <h1 className=\"mt-5\">Transactions</h1>\n      { trans.length? (\n        <TransactionTable queue={trans} isDisplay={true} />\n      ) : (\n        <p>此用户暂无相关交易记录</p>\n      ) }\n\n      <div onClick={handleWarning}></div>\n    </div>\n  );\n}\n\nexport default WalletDetail;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './navbar.css';\n\nconst NavBar = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark\">\n      <Link to=\"/home\" className=\"nav-brand h3\">\n        <span className=\"brand-text\">flying</span>Chain\n      </Link>\n      <div>\n        <Link to=\"/trans-queue\" className=\"btn btn-outline-light mr-3\">\n          交易队列\n          <span className=\"badge badge-light ml-2\">!</span>\n        </Link>\n        <Link to=\"/setting\" className=\"btn btn-outline-light mr-3\">设置</Link>\n        <Link to=\"/create\" className=\"btn btn-outline-light\">创建交易</Link>\n      </div>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport TransactionTable from '../../components/transaction-table/TransactionTable';\nimport './transaction-queue.css';\nconst { initChain } = require('../../store/store');\n\nconst initSuccess = {\n  isSuccess: false,\n  successText: '挖矿成功！'\n};\n\nconst initMining = {\n  isMining: false,\n  miningText: '努力挖矿中...'\n}\n\nconst TransactionQueue = () => {\n  const history = useHistory();\n  const [chain, setChain] = useState(initChain);\n  const [queue, setQueue] = useState(chain.transactionQueue);\n  const [btnLoading, setBtnLoading] = useState(false);\n  const [mining, setMining] = useState(initMining);\n  const [success, setSuccess] = useState(initSuccess);\n\n  const handleClick = () => {\n    setBtnLoading(true);\n    setMining({\n      ...mining,\n      isMining: true\n    });\n\n    chain.mineTheTransactionQueue(queue[0].from);\n\n    setBtnLoading(false);\n    setMining(initMining);\n    setSuccess({\n      ...success,\n      isSuccess: true\n    });\n\n    setTimeout(() => {\n      history.push('/');\n      setSuccess(initSuccess);\n\n    }, 2000);\n  };\n\n  const handleWarning = () => {\n    setChain(initChain);\n    setQueue(chain.transactionQueue);\n  };\n\n  return (\n  <div>\n    { mining.isMining? (\n      <div className=\"alert alert-primary queue-alert\">\n        <div className=\"container\">\n          { mining.miningText }\n        </div>\n      </div>\n    ) : null }\n    { success.isSuccess? (\n      <div className=\"alert alert-success queue-alert\">\n        <div className=\"container\">\n          { success.successText }\n        </div>\n      </div>\n    ) : null }\n\n    <div className=\"transaction-queue container mt-2\">\n      <h1>Transaction Queue</h1>\n      <p className=\"text-dark\">这个队列存放的交易记录将会出现在下一个区块中，若要封装此区块，需要开始挖矿过程。</p>\n      <br />\n      { queue.length? (\n        <div>\n        <div className=\"card queue-card\">\n          <TransactionTable queue={queue} isDisplay={false} />\n        </div>\n        <button className=\"btn btn-primary mt-4\" onClick={handleClick}>\n          { btnLoading? (\n            <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n          ) : null }\n          <strong>Start mining</strong>\n        </button>\n        </div>\n        ) : (\n        <div className=\"alert alert-warning no-alert\">\n          <p className=\"text-dark\">现在还没有交易记录噢！</p>\n        </div>\n        ) }\n      </div>\n      <div onClick={handleWarning}></div>\n    </div>\n  );\n}\n\nexport default TransactionQueue;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './pages/home/Home';\nimport Setting from './pages/setting/Setting';\nimport CreateTransaction from './pages/create-transacion/CreateTransaction';\nimport WalletDetail from './pages/wallet-detail/WalletDetail';\nimport NavBar from './components/navbar/NavBar';\nimport TransactionQueue from './pages/transaction-queue/TransactionQueue';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <NavBar />\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/setting\" component={Setting} />\n        <Route path=\"/create\" component={CreateTransaction}/>\n        <Route path=\"/wallet/:key\" component={WalletDetail} />\n        <Route path=\"/trans-queue\" component={TransactionQueue} />\n      </Switch>\n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}